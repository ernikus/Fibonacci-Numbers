//Title:        Nth Fibonacci Number
//Difficulty:   Hard
//Source:       https://edabit.com/challenge/Y7DMN2uY8FL3czf8o
//Soln Author:	ernikus

#include "Solution.h"

#include <iostream>

bool execute(const int input, const std::string output, const std::string answer)
{
	std::cout << "Input:\t" << input << std::endl;
	std::cout << "Output:\t" << output << std::endl;
	std::cout << "Answer:\t" << answer << std::endl;


	if (output == answer)
	{
		std::cout << "Correct Answer!" << std::endl << std::endl;
		return true;
	}
	else
	{
		std::cout << "Bad Answer!" << std::endl << std::endl;
		return false;
	}
}

int main()
{
	int correct{ 0 }, testNum{ 0 };

	correct += execute(10, fibonacci(10), "55");
	testNum++;

	correct += execute(20, fibonacci(20), "6765");
	testNum++;

	correct += execute(30, fibonacci(30), "832040");
	testNum++;

	correct += execute(40, fibonacci(40), "102334155");
	testNum++;

	correct += execute(50, fibonacci(50), "12586269025");
	testNum++;

	correct += execute(60, fibonacci(60), "1548008755920");
	testNum++;

	correct += execute(70, fibonacci(70), "190392490709135");
	testNum++;

	correct += execute(80, fibonacci(80), "23416728348467685");
	testNum++;

	correct += execute(90, fibonacci(90), "2880067194370816120");
	testNum++;

	correct += execute(100, fibonacci(100), "354224848179261915075");
	testNum++;

	correct += execute(110, fibonacci(110), "43566776258854844738105");
	testNum++;

	correct += execute(120, fibonacci(120), "5358359254990966640871840");
	testNum++;

	correct += execute(130, fibonacci(130), "659034621587630041982498215");
	testNum++;

	correct += execute(140, fibonacci(140), "81055900096023504197206408605");
	testNum++;


	correct += execute(150, fibonacci(150), "9969216677189303386214405760200");
	testNum++;

	correct += execute(160, fibonacci(160), "1226132595394188293000174702095995");
	testNum++;

	correct += execute(170, fibonacci(170), "150804340016807970735635273952047185");
	testNum++;

	correct += execute(180, fibonacci(180), "18547707689471986212190138521399707760");
	testNum++;

	correct += execute(190, fibonacci(190), "2281217241465037496128651402858212007295");
	testNum++;

	correct += execute(200, fibonacci(200), "280571172992510140037611932413038677189525");
	testNum++;

	//BONUS
	
	correct += execute(222, fibonacci(222), "11111460156937785151929026842503960837766832936");
	testNum++;

	correct += execute(1111, fibonacci(1111), "6851462981265369536304298877223231154064355390623195419885661484162849735541256952762360871448156142552148460793441585691068131682370855135019896825808086317430648360941203391832868742715640036246053259136014253626356840914521594989");
	testNum++;

	correct += execute(11111, fibonacci(11111), "515449135231559341621591189426925989418721609167804403107087312453694294479381404009230187092526675635022414542794904158934368158350216751867828729213516067642461147232232268304004580596220514978296704097915617589481297010691749471374967376304898014174716132125169572206688299944881902864940487579850754037243411123276226268998274067232370656873037885028569262362061989878439356579125363739644638605976667733232134130196207453194213358616463005487086631652051025004934485196108344869244852506414543015664379038338857611347469102943415360234480491921571800239803284078147859161629100936007246749423449323827401152142684138017539299637210829955409666781554035555164800825902557894478979141680264821730580654526990976167873657740460977594388216677737796493623940501749951993194553070912364327001564086186444836587037180810655016948562608480145057901528396467327800369394725748856906177005886944277609832795419082424474419033931754123200248752600310587761729439189440527073799320938597514569967706344559861576816209214912702962065352672071494639021231263782338510241176219316180788341549329905272081790433223099472061887224254193326845457247107409050092252994931668934553671721376871177693036352993174131508107261653495025271505086039171034392185521383307925723081097129536244468148375789733582131797176285225457221029865658845503179175504307577930140222583997281098099332145783930418777810346276337273420733754768191403158839413163368990092771464626510432292314209966950363068432367028332284209840897425718364670733733609565321893240873729315360915814803137552560521106490937691421540344502423323064743545226360364012549367167257038202145921861042955299329942301124074181956428710271876930526019606797077558959445434943166179407403375284366340173639269807373108055388080201746447050804598946499248800891171987624229020766742994219485280547337990630263452898332213470171667603200991268579583095661682595442200149483262133621860660302141160974707437100532341443580636798210704649175613121627855118061762876137389590812891131603206815601843823369210865672605256743142632199819790960079549275267815983406188538500072911327187912330503064073869613282412315795790671452556371408354045852898125070873750632615799469070245720036053071341314252092446074260578417947762296896685389368685659291620443322232933074723685001342680075497489");
	testNum++;
	


	std::cout << "Correctness: " << std::endl;
	std::cout << correct << "/" << testNum << "!";
	std::cout << "\t(" << int(float(correct) / float(testNum) * 100) << "%/" << 100 << "%)" << std::endl;
}